datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  firstname String?
  lastname  String?
  posts     Post[]
  role      Role
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean
  title     String
  content   String?
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Client {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  password     String
  nickname     String
  balance      Int
  VerifyRecord VerifyRecord[]
}

model Verifier {
  id           String         @id @default(cuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  password     String
  VerifyRecord VerifyRecord[]
}

model VerifyRecord {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  title        String
  content      String
  type         ResourceType
  verifyStatus VerifyStatus @default(PENDING)
  verifier     Verifier?    @relation(fields: [verifierId], references: [id])
  verifierId   String?
  client       Client       @relation(fields: [clientId], references: [id])
  clientId     String
  Queue        Queue?       @relation(fields: [queueId], references: [id])
  queueId      String?
}

model Queue {
  id              String            @id @default(cuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  title           String
  VerifyRecord    VerifyRecord[]
  MachineStrategy MachineStrategy[]
}

model MachineStrategy {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  title     String
  content   String
  queue     Queue?   @relation(fields: [queueId], references: [id])
  queueId   String?
}

enum Role {
  ADMIN
  USER
}

enum ResourceType {
  IMAGE
  VIDEO
  TEXT
}

enum VerifyStatus {
  PENDING
  VERIFIED
  REJECTED
}
